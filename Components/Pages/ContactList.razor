@page "/contactlist"
@rendermode InteractiveServer
@using ContactManager.Services


<PageTitle>Lista de contatos</PageTitle>
<div class="topH row">
    <div class="texto col-6">
        <h1>Lista de Contatos</h1>
    </div>
    <div class="topHR texto col-6" style="text-align: right;">
        <button class="btn btn-Add" style="margin-right:10px;" @onclick="(()=> formState = AgentFormState.ListingAndPoppingAdd)"><ion-icon name="add-circle-outline" style="margin-right:3px;"></ion-icon>Adicionar</button>
        <input class="inpForm" type="text" placeholder="🔎 Pesquisar" @bind-value="@filter" @bind-value:event="oninput" />
        <a href=""><ion-icon name="arrow-undo" style="color:lawngreen; font-size: 40px;" title="Voltar"></ion-icon></a>
    </div>
</div>
<div class="row" style="margin:10px;">
    <AlphabetMenu></AlphabetMenu>
    <div class="col-md-11 formCrud">
        @if (Contacts != null)
        {
            <CrudTable columns="1" headers="@headers" itemList="@Contacts" styleheight="height: 58vh;">
                <itemRenderFragment Context="item">
                    @if (Show(item))
                    {
                        <ContactItem item="item" Remove="Remove" />
                    }
                </itemRenderFragment>
            </CrudTable>
        }
    </div>
</div>

@switch (formState)
{
    case AgentFormState.ListingAndPoppingAdd:
        <CrudPopup ItemType="ContactSettings">
            <HeaderRenderFragment Context="item">
                <CrudPopupHeader Title="Adicionar contato" ClosePopup="ClosePopup" />
            </HeaderRenderFragment>
            <BodyRenderFragment Context="item">
                <ContactCreatePopup />
            </BodyRenderFragment>
            <FooterRenderFragment Context="item">
                <CrudPopupFooter ClosePopup="ClosePopup" />
            </FooterRenderFragment>
        </CrudPopup>
        break;
    case AgentFormState.ListingAndPoppingRemove:
        break;

}
@code {
    private List<string> headers = new List<string>
    {
        "Name",
        "Phone",
        "Email",
        ""
    };
    private string filter = "";

    public enum AgentFormState
    {
        Listing,
        ListingAndPoppingAdd,
        ListingAndPoppingRemove
    }

    private AgentFormState formState = AgentFormState.Listing;

    private ContactSettings item;
    private List<ContactSettings> Contacts = new List<ContactSettings>
    {
        new ContactSettings{Image = "Mikael", Name = "Mikael", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho"},
        new ContactSettings{Image = "Camila", Name = "Camila", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Escola" },
        new ContactSettings{Image = "Nami", Name = "Nami", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Colega" },
        new ContactSettings{Image = "Sanji", Name = "Sanji", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho" },
        new ContactSettings{Image = "Mikael", Name = "Mikael", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho"},
        new ContactSettings{Image = "Camila", Name = "Camila", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Escola" },
        new ContactSettings{Image = "Nami", Name = "Nami", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Colega" },
        new ContactSettings{Image = "Sanji", Name = "Sanji", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho" },
        new ContactSettings{Image = "Mikael", Name = "Mikael", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho"},
        new ContactSettings{Image = "Camila", Name = "Camila", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Escola" },
        new ContactSettings{Image = "Nami", Name = "Nami", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Colega" },
        new ContactSettings{Image = "Sanji", Name = "Sanji", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho" },
        new ContactSettings{Image = "Mikael", Name = "Mikael", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho"},
        new ContactSettings{Image = "Camila", Name = "Camila", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Escola" },
        new ContactSettings{Image = "Nami", Name = "Nami", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Colega" },
        new ContactSettings{Image = "Sanji", Name = "Sanji", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho" },
        new ContactSettings{Image = "Mikael", Name = "Mikael", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho"},
        new ContactSettings{Image = "Camila", Name = "Camila", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Escola" },
        new ContactSettings{Image = "Nami", Name = "Nami", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Colega" },
        new ContactSettings{Image = "Sanji", Name = "Sanji", Phone = "(11) 5148-4123",Email="Teste@gmail.com", Description="Trabalho" }
    };

    private async Task Remove(ContactSettings _item)
    {
        item = _item;
        CommitRemove(item);
    }

    private async Task CommitRemove(ContactSettings item)
    {

    }

    private bool Show(ContactSettings item)
    {
        if (filter?.Length > 0)
        {
            string fields = $"{item.Name}";
            return fields.ToLower().Contains(filter.ToLower());
        }
        else
        {
            return true;
        }
    }

    private void ClosePopup()
    {
        formState = AgentFormState.Listing;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {

    }
}